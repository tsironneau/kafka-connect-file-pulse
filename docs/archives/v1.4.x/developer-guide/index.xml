<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kafka Connect File Pulse â€“ Developer Guide</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/</link><description>Recent content in Developer Guide on Kafka Connect File Pulse</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 21 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Installation</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/installation/</link><pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/installation/</guid><description>
&lt;p>&lt;strong>Connect FilePulse&lt;/strong> can be installed either from &lt;a href="https://github.com/streamthoughts/kafka-connect-file-pulse/releases">GitHub Releases Page&lt;/a> or from &lt;a href="https://www.confluent.io/hub/streamthoughts/kafka-connect-file-pulse">Confluent Hub&lt;/a>.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Caution&lt;/h4>
You should note that the connector downloaded from Confluent Hub may not reflect the latest available version.
&lt;/div>
&lt;p>&lt;strong>Confluent Hub CLI installation&lt;/strong>&lt;/p>
&lt;p>Use the &lt;a href="https://docs.confluent.io/current/confluent-hub/client.html">Confluent Hub client&lt;/a> to install this connector with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>confluent-hub install streamthoughts/kafka-connect-file-pulse:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Download Installation&lt;/strong>&lt;/p>
&lt;p>Download the distribution ZIP file for the latest available version.&lt;/p>
&lt;p>&lt;strong>Example :&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1.3.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -sSL https://github.com/streamthoughts/kafka-connect-file-pulse/releases/download/v&lt;span style="color:#000">$VERSION&lt;/span>/streamthoughts-kafka-connect-file-pulse-&lt;span style="color:#000">$VERSION&lt;/span>.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Extract it into one of the directories that is listed on the &lt;code>plugin.path&lt;/code> worker configuration property.&lt;/p>
&lt;p>You can also use the Confluent Hub CLI for installing it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ confluent-hub install --no-prompt streamthoughts-kafka-connect-file-pulse-&lt;span style="color:#000">$VERSION&lt;/span>.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Important&lt;/h4>
When you run Connect workers in &lt;strong>distributed mode&lt;/strong>, the connector-plugin must be installed &lt;strong>on each of machines&lt;/strong> running Kafka Connect.
&lt;/div></description></item><item><title>Docs: Basic Configuration</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/configuration/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/configuration/</guid><description>
&lt;h2 id="commons-configuration">Commons configuration&lt;/h2>
&lt;p>Whatever the kind of files you are processing a connector should always be configured with the below properties.
Those configuration are described in detail in subsequent chapters.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>fs.scanner.class&lt;/code>&lt;/td>
&lt;td>The fully qualified name of the class which is used to scan file system&lt;/td>
&lt;td>class&lt;/td>
&lt;td>&lt;em>io.streamthoughts.kafka.connect.filepulse.scanner.local.LocalFSDirectoryWalker&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fs.cleanup.policy.class&lt;/code>&lt;/td>
&lt;td>The fully qualified name of the class which is used to cleanup files&lt;/td>
&lt;td>class&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fs.scan.directory.path&lt;/code>&lt;/td>
&lt;td>The input directory to scan&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fs.scan.interval.ms&lt;/code>&lt;/td>
&lt;td>Time interval (in milliseconds) at wish to scan input directory&lt;/td>
&lt;td>long&lt;/td>
&lt;td>&lt;em>10000&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fs.scan.filters&lt;/code>&lt;/td>
&lt;td>Filters use to list eligible input files&lt;/td>
&lt;td>list&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>filters&lt;/code>&lt;/td>
&lt;td>List of filters aliases to apply on each data (order is important)&lt;/td>
&lt;td>list&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>internal.kafka.reporter.topic&lt;/code>&lt;/td>
&lt;td>Name of the internal topic used by tasks and connector to report and monitor file progression.&lt;/td>
&lt;td>class&lt;/td>
&lt;td>&lt;em>connect-file-pulse-status&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>internal.kafka.reporter.bootstrap.servers&lt;/code>&lt;/td>
&lt;td>A list of host/port pairs uses by the reporter for establishing the initial connection to the Kafka cluster.&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>task.reader.class&lt;/code>&lt;/td>
&lt;td>The fully qualified name of the class which is used by tasks to read input files&lt;/td>
&lt;td>class&lt;/td>
&lt;td>&lt;em>io.streamthoughts.kafka.connect.filepulse.reader.RowFileReader&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>offset.strategy&lt;/code>&lt;/td>
&lt;td>A separated list of attributes, using &lt;code>+&lt;/code> as a character separator, to be used for uniquely identifying an input file; must be one of [&lt;code>name&lt;/code>, &lt;code>path&lt;/code>, &lt;code>lastModified&lt;/code>, &lt;code>inode&lt;/code>, &lt;code>hash&lt;/code>] (e.g: &lt;code>name+hash&lt;/code>). Note that order doesn&amp;rsquo;t matter.&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>path+name&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>topic&lt;/code>&lt;/td>
&lt;td>The default output topic to write&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="prior-to-connect-filepulse-13x-deprecated">Prior to Connect FilePulse 1.3.x (deprecated)&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>internal.kafka.reporter.id&lt;/code>&lt;/td>
&lt;td>The reporter identifier to be used by tasks and connector to report and monitor file progression (default null). This property must only be set for users that have run a connector in version prior to 1.3.x to ensure backward-compatibility (when set, must be unique for each connect instance).&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Scanning Files</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/scanning-files/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/scanning-files/</guid><description>
&lt;p>The connector must be configured with a specific &lt;a href="https://github.com/streamthoughts/kafka-connect-file-pulse/blob/master/connect-file-pulse-plugin/src/main/java/io/streamthoughts/kafka/connect/filepulse/scanner/local/FSDirectoryWalker.java">FSDirectoryWalker&lt;/a>&lt;br>
that will be responsible for scanning an input directory to find files eligible to be streamed in Kafka.&lt;/p>
&lt;p>The default &lt;code>FSDirectoryWalker&lt;/code> implementation is :&lt;/p>
&lt;p>&lt;code>io.streamthoughts.kafka.connect.filepulse.scanner.local.LocalFSDirectoryWalker&lt;/code>.&lt;/p>
&lt;p>The &lt;code>FilePulseSourceConnector&lt;/code> periodically triggers a file system scan of the directory specified in the &lt;code>input.directory.path&lt;/code>
connector property. Scan is executed in a background-thread invoking the configured &lt;code>FSDirectoryWalker&lt;/code>.&lt;/p>
&lt;h2 id="configuring-directory-scan-using-localfsdirectorywalker">Configuring Directory Scan (using &lt;code>LocalFSDirectoryWalker&lt;/code>)&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>fs.scanner.class&lt;/code>&lt;/td>
&lt;td>The class used to scan file system&lt;/td>
&lt;td>class&lt;/td>
&lt;td>&lt;em>io.streamthoughts.kafka.connect.filepulse.scanner.local.LocalFSDirectoryWalker&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fs.scan.directory.path&lt;/code>&lt;/td>
&lt;td>The input directory to scan&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fs.scan.interval.ms&lt;/code>&lt;/td>
&lt;td>Time interval in milliseconds at wish the input directory is scanned&lt;/td>
&lt;td>long&lt;/td>
&lt;td>&lt;em>10000&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fs.scan.filters&lt;/code>&lt;/td>
&lt;td>The comma-separated list of fully qualified class names of the filter-filters to be uses to list eligible input files&lt;/td>
&lt;td>list&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fs.recursive.scan.enable&lt;/code>&lt;/td>
&lt;td>Boolean indicating whether local directory should be recursively scanned&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;em>true&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="filtering-input-files">Filtering input files&lt;/h2>
&lt;p>You can configure one or more &lt;code>FileFilter&lt;/code> that will be used to determine if a file should be scheduled for processing or ignored.
All files that are filtered out are simply ignored and remain untouched on the file system until the next scan.
At the next scan, previously filtered files will be evaluated again to determine if they are now eligible for processing.&lt;/p>
&lt;p>FilePulse packs with the following built-in filters :&lt;/p>
&lt;h3 id="ignorehiddenfilefilter">IgnoreHiddenFileFilter&lt;/h3>
&lt;p>The &lt;code>IgnoreHiddenFileFilter&lt;/code> can be used to filter hidden files from being read.&lt;/p>
&lt;p>&lt;strong>Configuration example&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">fs.scan.filters=io.streamthoughts.kafka.connect.filepulse.scanner.local.filter.IgnoreHiddenFileListFilter
&lt;/code>&lt;/pre>&lt;h3 id="lastmodifiedfilefilter">LastModifiedFileFilter&lt;/h3>
&lt;p>The &lt;code>LastModifiedFileFilter&lt;/code> can be used to filter files that have been modified to recently based on their last modified date property.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">fs.scan.filters=io.streamthoughts.kafka.connect.filepulse.scanner.local.filter.LastModifiedFileFilter
# The last modified time for a file can be accepted (default: 5000)
file.filter.minimum.age.ms=10000
&lt;/code>&lt;/pre>&lt;h3 id="regexfilefilter">RegexFileFilter&lt;/h3>
&lt;p>The &lt;code>RegexFileFilter&lt;/code> can be used to filter files that do not match the specified regex.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">fs.scan.filters=io.streamthoughts.kafka.connect.filepulse.scanner.local.filter.RegexFileListFilter
# The regex pattern used to matches input files
file.filter.regex.pattern=&amp;#34;\\.log$&amp;#34;
&lt;/code>&lt;/pre>&lt;h2 id="supported-file-types">Supported File types&lt;/h2>
&lt;p>&lt;code>LocalFSDirectoryWalker&lt;/code> will try to detect if a file needs to be decompressed by probing its content type or its extension (javadoc : &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#probeContentType-java.nio.file.Path">Files#probeContentType&lt;/a>)&lt;/p>
&lt;p>The connector supports the following content types :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>GZIP&lt;/strong> : &lt;code>application/x-gzip&lt;/code>&lt;/li>
&lt;li>&lt;strong>TAR&lt;/strong> : &lt;code>application/x-tar&lt;/code>&lt;/li>
&lt;li>&lt;strong>ZIP&lt;/strong> : &lt;code>application/x-zip-compressed&lt;/code> or &lt;code>application/zip&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: File Readers</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/file-readers/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/file-readers/</guid><description>
&lt;p>The connector can be configured with a specific &lt;a href="https://github.com/streamthoughts/kafka-connect-file-pulse/blob/master/connect-file-pulse-api/src/main/java/io/streamthoughts/kafka/connect/filepulse/reader/FileInputReader.java">FileInputReader&lt;/a>.
The FileInputReader is used by tasks to read scheduled source files.&lt;/p>
&lt;h2 id="rowfileinputreader-default">RowFileInputReader (default)&lt;/h2>
&lt;p>The &lt;code>RowFileInputReader&lt;/code> reads files from the local file system line by line.
This reader creates one record per row. It should be used for reading delimited text files, application log files, etc.&lt;/p>
&lt;p>The following provides usage information for &lt;code>io.streamthoughts.kafka.connect.filepulse.reader.RowFileInputReader&lt;/code> (&lt;a href="https://github.com/streamthoughts/kafka-connect-file-pulse/blob/master/connect-file-pulse-plugin/src/main/java/io/streamthoughts/kafka/connect/filepulse/reader/RowFileInputReader.java">source code&lt;/a>)&lt;/p>
&lt;h2 id="bytesarrayinputreader">BytesArrayInputReader&lt;/h2>
&lt;p>The &lt;code>BytesArrayInputReader&lt;/code> create a single byte array record from a source file.&lt;/p>
&lt;p>The following provides usage information for &lt;code>io.streamthoughts.kafka.connect.filepulse.reader.BytesArrayInputReader&lt;/code> (&lt;a href="https://github.com/streamthoughts/kafka-connect-file-pulse/blob/master/connect-file-pulse-plugin/src/main/java/io/streamthoughts/kafka/connect/filepulse/reader/BytesArrayInputReader.java">source code&lt;/a>)&lt;/p>
&lt;h2 id="avrofileinputreader">AvroFileInputReader&lt;/h2>
&lt;p>The &lt;code>AvroFileInputReader&lt;/code> is used to read Avro files.&lt;/p>
&lt;p>The following provides usage information for &lt;code>io.streamthoughts.kafka.connect.filepulse.reader.AvroFileInputReader&lt;/code> (&lt;a href="https://github.com/streamthoughts/kafka-connect-file-pulse/blob/master/connect-file-pulse-plugin/src/main/java/io/streamthoughts/kafka/connect/filepulse/reader/AvroFileInputReader.java">source code&lt;/a>)&lt;/p>
&lt;h2 id="xmlfileinputreader">XMLFileInputReader&lt;/h2>
&lt;p>The &lt;code>XMLFileInputReader&lt;/code> is used to read XML files.&lt;/p>
&lt;p>The following provides usage information for &lt;code>io.streamthoughts.kafka.connect.filepulse.reader.XMLFileInputReader&lt;/code> (&lt;a href="https://github.com/streamthoughts/kafka-connect-file-pulse/blob/master/connect-file-pulse-plugin/src/main/java/io/streamthoughts/kafka/connect/filepulse/reader/XMLFileInputReader.java">source code&lt;/a>)&lt;/p>
&lt;h2 id="fileinputmetadatareader">FileInputMetadataReader&lt;/h2>
&lt;p>The &lt;code>FileInputMetadataReader&lt;/code> is used to send a single record per file containing metadata (i.e: &lt;code>name&lt;/code>, &lt;code>path&lt;/code>, &lt;code>hash&lt;/code>, &lt;code>lastModified&lt;/code>, &lt;code>size&lt;/code>, etc)&lt;/p>
&lt;p>The following provides usage information for &lt;code>io.streamthoughts.kafka.connect.filepulse.reader.FileInputMetadataReader&lt;/code> (&lt;a href="https://github.com/streamthoughts/kafka-connect-file-pulse/blob/master/connect-file-pulse-plugin/src/main/java/io/streamthoughts/kafka/connect/filepulse/reader/FileInputMetadataReader.java">source code&lt;/a>)&lt;/p></description></item><item><title>Docs: Filter Chain Definition</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/filters-chain-definition/</link><pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/filters-chain-definition/</guid><description>
&lt;p>The connector can be configured to apply complex transformations on messages before they are written to Kafka.&lt;/p>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;p>A &lt;a href="#filters">filter&lt;/a> chain can be specified in the connector configuration.&lt;/p>
&lt;ul>
&lt;li>filters - List of aliases for the filter, specifying the order in which the filters will be applied.&lt;/li>
&lt;li>filters.$alias.type - Fully qualified class name for the filter.&lt;/li>
&lt;li>filters.$alias.$filterSpecificConfig Configuration properties for the filter&lt;/li>
&lt;/ul>
&lt;p>For example, let&amp;rsquo;s parse a standard application logs file written with log4j using the build-in filters :&lt;/p>
&lt;pre tabindex="0">&lt;code>filters=GroupMultilineException, ExtractFirstLine, ParseLog4jLog
filters.GroupMultilineException.type=io.streamthoughts.kafka.connect.filepulse.filter.MultiRowFilter
filters.GroupMultilineException.negate=false
filters.GroupMultilineException.pattern=&amp;#34;^[\\t]&amp;#34;
filters.ExtractFirstLine.type=io.streamthoughts.kafka.connect.filepulse.filter.AppendFilter
filters.ExtractFirstLine.field=$.logmessage
filters.ExtractFirstLine.values={{ extract_array($.message, 0) }
filters.ParseLog4jLog.type=io.streamthoughts.kafka.connect.filepulse.filter.impl.GrokFilter
filters.ParseLog4jLog.match=&amp;#34;%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:loglevel} %{GREEDYDATA:thread} %{GREEDYDATA:logmessage}&amp;#34;
filters.ParseLog4jLog.source=log
filters.ParseLog4jLog.overwrite=logmessage
&lt;/code>&lt;/pre>&lt;h2 id="available-filters">Available Filters&lt;/h2>
&lt;p>These filters are available for use with Kafka Connect File Pulse:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Filter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Since&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="../filters#appendfilter">AppendFilter&lt;/a>&lt;/td>
&lt;td>Appends one or more values to an existing or non-existing array field&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#convertfilter">ConvertFilter&lt;/a>&lt;/td>
&lt;td>Converts a message field&amp;rsquo;s value to a specific type&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#datefilter">DateFilter&lt;/a>&lt;/td>
&lt;td>Converts a field&amp;rsquo;s value containing a date to a unix epoch time&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="./filters#delimitedrowfilter">DelimitedRowFilter&lt;/a>&lt;/td>
&lt;td>Parses a message field&amp;rsquo;s value containing columns delimited by a separator into a struct&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#dropfilter">DropFilter&lt;/a>&lt;/td>
&lt;td>Drops messages satisfying a specific condition without throwing exception.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#excludeFilter">ExcludeFilter&lt;/a>&lt;/td>
&lt;td>Excludes one or more fields from the input record.&lt;/td>
&lt;td>&lt;code>v1.4.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#explodeFilter">ExplodeFilter&lt;/a>&lt;/td>
&lt;td>Explodes an array or list field into separate records.&lt;/td>
&lt;td>&lt;code>v1.4.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#failfilter">FailFilter&lt;/a>&lt;/td>
&lt;td>Throws an exception when a message satisfy a specific condition&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#grokfilter">GrokFilter&lt;/a>&lt;/td>
&lt;td>Parses an unstructured message field&amp;rsquo;s value to a struct by combining Grok patterns&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#grouprowfilter">GroupRowFilter&lt;/a>&lt;/td>
&lt;td>Regroups multiple following messages into a single message by composing a grouping key&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#joinfilter">JoinFilter&lt;/a>&lt;/td>
&lt;td>Joins values of an array field with a specified separator&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#jsonfilter">JSONFilter&lt;/a>&lt;/td>
&lt;td>Unmarshallings a JSON message field&amp;rsquo;s value to a complex struct&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#multirowfilter">MultiRowFilter&lt;/a>&lt;/td>
&lt;td>Combines following message lines into single one by combining patterns&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#renamefilter">RenameFilter&lt;/a>&lt;/td>
&lt;td>Renames a message field&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../filters#splitfilter">SplitFilter&lt;/a>&lt;/td>
&lt;td>Splits a message field&amp;rsquo;s value to array&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="difference-between-kafka-connect-single-message-transforms-smt-functionality">Difference between Kafka Connect Single Message Transforms (SMT) functionality&lt;/h2>
&lt;p>Filters can be compared to Kafka Connect built-in &lt;a href="https://kafka.apache.org/documentation/#connect_transforms">Transformers&lt;/a>.
However, filters allow more complex pipelines to be built for structuring file data.
For example, they can be used to split one input message to multiple messages or to temporarily buffer consecutive messages in order to regroup them by fields or a pattern.&lt;/p></description></item><item><title>Docs: Accessing Data and Metadata</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/accessing-data-and-metadata/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/accessing-data-and-metadata/</guid><description>
&lt;p>Some filters (e.g : &lt;a href="#appendfilter">AppendFilter&lt;/a>) can be configured using &lt;em>Simple Connect Expression Language&lt;/em>.&lt;/p>
&lt;p>&lt;em>Simple Connect Expression Language&lt;/em> (ScEL for short) is an expression language based on regex that allows quick access and manipulating record fields and metadata.&lt;/p>
&lt;p>The synthaxes to define an expression are of the form : &lt;code>&amp;lt;expression string&amp;gt;&lt;/code> or &lt;code>&amp;quot;{{ &amp;lt;expression string&amp;gt; }}&amp;quot;&lt;/code>.&lt;/p>
&lt;p>ScEL supports the following capabilities :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Literal expressions&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Field Selector&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Nested Navigation&lt;/strong>&lt;/li>
&lt;li>&lt;strong>String substitution&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Functions&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="literal-expressions">Literal expressions&lt;/h2>
&lt;ul>
&lt;li>String : &lt;code>'Hello World'&lt;/code>&lt;/li>
&lt;li>Number : &lt;code>42&lt;/code>&lt;/li>
&lt;li>Boolean: &lt;code>True&lt;/code>&lt;/li>
&lt;li>Nullable: &lt;code>null&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="field-selector">Field Selector&lt;/h2>
&lt;p>The expression language can be used to easily select one field from the input record :&lt;/p>
&lt;p>&lt;code>$.username&lt;/code>&lt;/p>
&lt;h2 id="nested-navigation">Nested Navigation&lt;/h2>
&lt;p>To navigate down a struct value, just use a period to indicate a nested field value :&lt;/p>
&lt;p>&lt;code>$.address.city&lt;/code>&lt;/p>
&lt;h2 id="string-substitution">String substitution&lt;/h2>
&lt;p>The expression language can be used to easily build a new string field that concatenate multiple ones :&lt;/p>
&lt;p>&lt;code>The user {{ $.username }} is living in city {{ $.address.city }}&lt;/code>&lt;/p>
&lt;h2 id="function">Function&lt;/h2>
&lt;p>The expression language support function call :&lt;/p>
&lt;p>&lt;code>The user {{ $.username }} is living in city {{ uppercase($.address.city) }}&lt;/code>&lt;/p>
&lt;h2 id="dynamic-field-selector">Dynamic Field Selector&lt;/h2>
&lt;p>String substitution can be used to dynamically select a field :&lt;/p>
&lt;p>The bellow example shows how to dynamically build a field selector by concatenating &lt;code>$.&lt;/code> and
the first element present in the array field &lt;code>$.values&lt;/code>.&lt;/p>
&lt;p>&lt;code>{{ '$.'extract_array($.values, 0) }}&lt;/code>&lt;/p>
&lt;p>Note the used of double-quotes to define a substitution expressions&lt;/p>
&lt;h2 id="built-in-functions">Built-in Functions&lt;/h2>
&lt;p>ScEL supports a number of predefined functions that can be used to apply a single transformation on a field.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Function&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Syntax&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>contains&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if an array field&amp;rsquo;s value contains the specified value&lt;/td>
&lt;td>&lt;code>{{ contains(array, 'value') }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>converts&lt;/code>&lt;/td>
&lt;td>Converts a field&amp;rsquo;value into the specified type&lt;/td>
&lt;td>&lt;code>{{ converts(field, INTEGER) }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ends_with&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if an a string field&amp;rsquo;s value end with the specified string suffix&lt;/td>
&lt;td>&lt;code>{{ ends_with(field, 'suffix') }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>equals&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if an a string or number fields&amp;rsquo;s value equals the specified value&lt;/td>
&lt;td>&lt;code>{{ equals(field, value) }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>exists&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if an the specified field exists&lt;/td>
&lt;td>&lt;code>{{ ends_with(field, value) }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>extract_array&lt;/code>&lt;/td>
&lt;td>Returns the element at the specified position of the specified array&lt;/td>
&lt;td>&lt;code>{{extract_array(array, 0) }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is_null&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if a field&amp;rsquo;s value is null&lt;/td>
&lt;td>&lt;code>{{ is_null(field) }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>length&lt;/code>&lt;/td>
&lt;td>Returns the number of elements into an array of the length of an string field&lt;/td>
&lt;td>&lt;code>{{ length(array) }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lowercase&lt;/code>&lt;/td>
&lt;td>Converts all of the characters in a string field&amp;rsquo;s value to lower case&lt;/td>
&lt;td>&lt;code>{{ lowercase(field) }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>matches&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if a field&amp;rsquo;s value match the specified regex&lt;/td>
&lt;td>&lt;code>{{ matches(field, 'regex') }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>nlv&lt;/code>&lt;/td>
&lt;td>Sets a default value if a field&amp;rsquo;s value is null&lt;/td>
&lt;td>&lt;code>{{ length(array) }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>replace_all &lt;/code>&lt;/td>
&lt;td>Replaces every subsequence of the field&amp;rsquo;s value that matches the given pattern with the given replacement string.&lt;/td>
&lt;td>&lt;code>{{ replace_all(field, 'regex', 'replacement') }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>starts_with&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if an a string field&amp;rsquo;s value start with the specified string prefix&lt;/td>
&lt;td>&lt;code>{{ starts_with(field, 'prefix') }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>trim&lt;/code>&lt;/td>
&lt;td>Trims the spaces from the beginning and end of a string.&lt;/td>
&lt;td>&lt;code>{{ trim(field) }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>uppercase&lt;/code>&lt;/td>
&lt;td>Converts all of the characters in a string field&amp;rsquo;s value to upper case&lt;/td>
&lt;td>&lt;code>{{ uppercase(field) }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>In addition, ScEL supports nested functions.&lt;/p>
&lt;p>For example, the following expression is used to replace all whitespace characters after transforming our field&amp;rsquo;s value into lowercase.&lt;/p>
&lt;pre tabindex="0">&lt;code>replace_all(lowercase($.field), &amp;#39;\\s&amp;#39;, &amp;#39;-&amp;#39;)
&lt;/code>&lt;/pre>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Limitation&lt;/h4>
Currently, FilePulse does not support user-defined functions (UDFs). So you cannot register your own functions to enrich the expression language.
&lt;/div>
&lt;h2 id="scopes">Scopes&lt;/h2>
&lt;p>In previous section, we have shown how to use the expression language to select a specific field.
The selected field was part of our the current record being processed.&lt;/p>
&lt;p>Actually, ScEL allows you to get access to additional fields through the used of scopes.
Basically, a scope defined the root object on which a selector expression must evaluated.&lt;/p>
&lt;p>The syntax to define an expression with a scope is of the form : &amp;ldquo;&lt;code>$&amp;lt;scope&amp;gt;.&amp;lt;selector expression string&amp;gt;&lt;/code>&amp;rdquo;.&lt;/p>
&lt;p>By default, if no scope is defined in the expression, the scope &lt;code>$value&lt;/code> is implicitly used.&lt;/p>
&lt;p>ScEL supports a number of predefined scopes that can be used for example :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>To define the topic for the record.&lt;/strong>&lt;/li>
&lt;li>&lt;strong>To define the key for the record.&lt;/strong>&lt;/li>
&lt;li>&lt;strong>To get access to metadata about the source file.&lt;/strong>&lt;/li>
&lt;li>Etc.&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Scope&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$headers&lt;/code>&lt;/td>
&lt;td>The record headers&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$key&lt;/code>&lt;/td>
&lt;td>The record key&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$metadata&lt;/code>&lt;/td>
&lt;td>The file metadata&lt;/td>
&lt;td>&lt;code>struct&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$offset&lt;/code>&lt;/td>
&lt;td>The offset information of this record into the source file&lt;/td>
&lt;td>&lt;code>struct&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$system&lt;/code>&lt;/td>
&lt;td>The system environment variables and runtime properties&lt;/td>
&lt;td>&lt;code>struct&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$timestamp&lt;/code>&lt;/td>
&lt;td>The record timestamp&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$topic&lt;/code>&lt;/td>
&lt;td>The output topic&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$value&lt;/code>&lt;/td>
&lt;td>The record value&lt;/td>
&lt;td>&lt;code>struct&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$variables&lt;/code>&lt;/td>
&lt;td>The contextual filter-chain variables&lt;/td>
&lt;td>&lt;code>map[string, object]&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Note, that in case of failures more fields are added to the current filter context (see : &lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/handling-failures/">Handling Failures&lt;/a>)&lt;/p>
&lt;h3 id="record-headers">Record Headers&lt;/h3>
&lt;p>The scope &lt;code>headers&lt;/code> allows to defined the headers of the output record.&lt;/p>
&lt;h3 id="record-key">Record key&lt;/h3>
&lt;p>The scope &lt;code>key&lt;/code> allows to defined the key of the output record. Only string key is currently supported.&lt;/p>
&lt;h3 id="source-metadata">Source Metadata&lt;/h3>
&lt;p>The scope &lt;code>metadata&lt;/code> allows read access to information about the file being processing.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Predefined Fields (ScEL)&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$metadata.name&lt;/code>&lt;/td>
&lt;td>The file name&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$metadata.path&lt;/code>&lt;/td>
&lt;td>The file directory path&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$metadata.absolutePath&lt;/code>&lt;/td>
&lt;td>The file absolute path&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$metadata.hash&lt;/code>&lt;/td>
&lt;td>The file CRC32 hash&lt;/td>
&lt;td>&lt;code>int&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$metadata.lastModified&lt;/code>&lt;/td>
&lt;td>The file last modified time.&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$metadata.size&lt;/code>&lt;/td>
&lt;td>The file size&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$metadata.inode&lt;/code>&lt;/td>
&lt;td>The file Unix inode&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="record-offset">Record Offset&lt;/h2>
&lt;p>The scope &lt;code>offset&lt;/code> allows read access to information about the original position of the record into the source file.
The available fields depend of the configured FileInputRecord.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Predefined Fields (ScEL)&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$offset.timestamp&lt;/code>&lt;/td>
&lt;td>The creation time of the record (millisecond)&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Information only available if &lt;code>RowFilterReader&lt;/code> is configured.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Predefined Fields (ScEL)&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$offset.startPosition&lt;/code>&lt;/td>
&lt;td>The start position of the record into the source file&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$offset.endPosition&lt;/code>&lt;/td>
&lt;td>The end position of the record into the source file&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$offset.size&lt;/code>&lt;/td>
&lt;td>The size in bytes&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$offset.row&lt;/code>&lt;/td>
&lt;td>The row number of the record into the source&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Information only available if &lt;code>BytesArrayInputReader&lt;/code> is configured.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Predefined Fields (ScEL)&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$offset.startPosition&lt;/code>&lt;/td>
&lt;td>The start position of the record into the source file (always equals to 0)&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$offset.endPosition&lt;/code>&lt;/td>
&lt;td>The end position of the record into the source file (equals to the file size)&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Information only available if &lt;code>AvroFilterInputReader&lt;/code> is configured.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Predefined Fields (ScEL)&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$offset.blockStart&lt;/code>&lt;/td>
&lt;td>The start position of the current block&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$offset.position&lt;/code>&lt;/td>
&lt;td>The position into the current block.&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$offset.records&lt;/code>&lt;/td>
&lt;td>The number of record read into the current block.&lt;/td>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="system">System&lt;/h2>
&lt;p>The scope &lt;code>system&lt;/code> allows read access to system environment variables and runtime properties.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Predefined Fields (ScEL)&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$system.env&lt;/code>&lt;/td>
&lt;td>The system environment variables.&lt;/td>
&lt;td>&lt;code>map[string, string]&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$system.props&lt;/code>&lt;/td>
&lt;td>The system environment properties.&lt;/td>
&lt;td>&lt;code>map[string, string]&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="timestamp">Timestamp&lt;/h2>
&lt;p>The scope &lt;code>$timestamp&lt;/code> allows to defined the timestamp of the output record.&lt;/p>
&lt;h2 id="topic">Topic&lt;/h2>
&lt;p>The scope &lt;code>$topic&lt;/code> allows to defined the target topic of the output record.&lt;/p>
&lt;h2 id="value">Value&lt;/h2>
&lt;p>The scope &lt;code>$value&lt;/code> allows to defined the fields of the output record&lt;/p>
&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>The scope &lt;code>$variables&lt;/code> allows read/write access to a simple key-value map structure.
This scope can be used to share user-defined variables between &lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/filters/">Processing Filters&lt;/a>.&lt;/p>
&lt;p>Note : variables are not cached between records.&lt;/p></description></item><item><title>Docs: Conditional Execution</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/conditional-execution/</link><pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/conditional-execution/</guid><description>
&lt;p>A conditional property &lt;code>if&lt;/code> can be configured on each filter to determine if that filter should be applied or skipped.
When a filter is skipped, message flow to the next filter without any modification.&lt;/p>
&lt;p>&lt;code>if&lt;/code> configuration accepts a Simple Connect Expression that must return to &lt;code>true&lt;/code> or &lt;code>false&lt;/code>.
If the configured expression does not evaluate to a boolean value the filter chain will failed.&lt;/p>
&lt;p>The&lt;code>if&lt;/code> property supports (&lt;a href="accessing-data-and-metadata">simple expression&lt;/a>)&lt;/p>
&lt;p>The boolean value returned from the filter condition can be inverted by setting the property &lt;code>invert&lt;/code> to &lt;code>true&lt;/code>.&lt;/p>
&lt;p>For example, the below filter will only be applied on message having a log message containing &amp;ldquo;BadCredentialsException&amp;rdquo;&lt;/p>
&lt;pre tabindex="0">&lt;code>filters.TagSecurityException.type=io.streamthoughts.kafka.connect.filepulse.filter.AppendFilter
filters.TagSecurityException.if={{ contains(data.logmessage, BadCredentialsException) }}
filters.TagSecurityException.invert=false
filters.TagSecurityException.field=tags
filters.TagSecurityException.values=SecurityAlert
&lt;/code>&lt;/pre>&lt;p>These boolean functions are available for use with &lt;code>if&lt;/code> configuration :&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Function&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Syntax&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>contains&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if an array field&amp;rsquo;s value contains the specified value&lt;/td>
&lt;td>&lt;code>{% raw %}{{ contains(field, value) }}{% endraw %}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ends_with&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if an a string field&amp;rsquo;s value end with the specified string suffix&lt;/td>
&lt;td>&lt;code>{% raw %}{{ ends_with(field, suffix) }}{% endraw %}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>equals&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if an a string or number fields&amp;rsquo;s value equals the specified value&lt;/td>
&lt;td>&lt;code>{% raw %}{{ equals(field, value) }}{% endraw %}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>exists&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if an the specified field exists&lt;/td>
&lt;td>&lt;code>{% raw %}{{ exists(struct, field) }}{% endraw %}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is_null&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if a field&amp;rsquo;s value is null&lt;/td>
&lt;td>&lt;code>{% raw %}{{ is_null(field) }}{% endraw %}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>matches&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if a field&amp;rsquo;s value match the specified regex&lt;/td>
&lt;td>&lt;code>{% raw %}{{ matches(field, regex) }}{% endraw %}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>starts_with&lt;/code>&lt;/td>
&lt;td>Returns &lt;code>true&lt;/code> if an a string field&amp;rsquo;s value start with the specified string prefix&lt;/td>
&lt;td>&lt;code>{% raw %}{{ starts_with(field, prefix) }}{% endraw %}&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Limitations&lt;/strong> :&lt;/p>
&lt;ul>
&lt;li>&lt;code>if&lt;/code> property does not support binary operator and then a single condition can be configured.&lt;/li>
&lt;li>condition cannot be used to easily create pipeline branching.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Handling Failures</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/handling-failures/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/handling-failures/</guid><description>
&lt;p>The connector provides some mechanisms to handle failures while executing filters.&lt;/p>
&lt;p>By default, the filters chain will immediately failed after an exception is thrown.
But, you can also configure each filter to either ignore errors or to branch to a sub filters-chain.&lt;/p>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>withOnFailure&lt;/code>&lt;/td>
&lt;td>List of filters aliases to apply on each data after failure (order is important).&lt;/td>
&lt;td>list&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ignoreFailure&lt;/code>&lt;/td>
&lt;td>Ignore failure and continue pipeline filters&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;em>false&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="ignoring-failure">Ignoring failure&lt;/h2>
&lt;p>By setting the property &lt;code>ignoreFailure&lt;/code> to &lt;code>true&lt;/code>, the filter will be ignored if an exception is thrown.&lt;/p>
&lt;p>In that case, the exception is written to the output logs and current data record is simply forwarded to the next filter in the chain.&lt;/p>
&lt;p>Using &lt;code>ignoreFailure=true&lt;/code> can be recommended for optional filters.&lt;/p>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>In the below example, the he filter with alias Log4jGrokFilter will be skip in case of failure.&lt;/p>
&lt;pre tabindex="0">&lt;code>filters=Log4jGrokFilter
filters.Log4jGrokFilter.type=io.streamthoughts.kafka.connect.filepulse.filter.GrokFilter
filters.Log4jGrokFilter.match=&amp;#34;%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}&amp;#34;
filters.Log4jGrokFilter.source=message
filters.Log4jGrokFilter.ignoreFailure=true
&lt;/code>&lt;/pre>&lt;h2 id="defining-error-filter-chain">Defining error filter chain&lt;/h2>
&lt;p>A more sophisticated way to handle failures is to define a sub filters-chain on each concern filters.&lt;/p>
&lt;p>Sub-filter chains can be defined using the property &lt;code>withOnFailure&lt;/code>.&lt;/p>
&lt;h3 id="accessing-exception-data">Accessing exception data&lt;/h3>
&lt;p>Within an error filter chain, some additional fields are available to each filter context.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Predefined Fields / ScEL&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$error.message&lt;/code>&lt;/td>
&lt;td>The error message&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$error.filter&lt;/code>&lt;/td>
&lt;td>The failed filter name&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="example-1">Example&lt;/h3>
&lt;p>In the below example, an &lt;code>errorMessage&lt;/code> field is added to the record value if the filter with alias Log4jGrokFilter fails.&lt;/p>
&lt;pre tabindex="0">&lt;code>filters=Log4jGrokFilter
filters.Log4jGrokFilter.type=io.streamthoughts.kafka.connect.filepulse.filter.GrokFilter
filters.Log4jGrokFilter.match=&amp;#34;%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}&amp;#34;
filters.Log4jGrokFilter.source=message
filters.Log4jGrokFilter.overwrite=message
filters.Log4jGrokFilter.withOnFailure=AppendError
filters.AppendError.type=io.streamthoughts.kafka.connect.filepulse.filter.AppendFilter
filters.AppendError.field=errorMessage
filters.AppendError.value=&amp;#34;$error.message&amp;#34;
&lt;/code>&lt;/pre></description></item><item><title>Docs: Processing Filters</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/filters/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/filters/</guid><description>
&lt;p>These filters are available for use with Kafka Connect File Pulse:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Filter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Since&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="#appendfilter">AppendFilter&lt;/a>&lt;/td>
&lt;td>Appends one or more values to an existing or non-existing array field&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#convertfilter">ConvertFilter&lt;/a>&lt;/td>
&lt;td>Converts a message field&amp;rsquo;s value to a specific type&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#datefilter">DateFilter&lt;/a>&lt;/td>
&lt;td>Converts a field&amp;rsquo;s value containing a date to a unix epoch time&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#delimitedrowfilter">DelimitedRowFilter&lt;/a>&lt;/td>
&lt;td>Parses a message field&amp;rsquo;s value containing columns delimited by a separator into a struct&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#dropfilter">DropFilter&lt;/a>&lt;/td>
&lt;td>Drops messages satisfying a specific condition without throwing exception.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#excludeFilter">ExcludeFilter&lt;/a>&lt;/td>
&lt;td>Excludes one or more fields from the input record.&lt;/td>
&lt;td>&lt;code>v1.4.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#explodeFilter">ExplodeFilter&lt;/a>&lt;/td>
&lt;td>Explodes an array or list field into separate records.&lt;/td>
&lt;td>&lt;code>v1.4.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#failfilter">FailFilter&lt;/a>&lt;/td>
&lt;td>Throws an exception when a message satisfy a specific condition&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#grokfilter">GrokFilter&lt;/a>&lt;/td>
&lt;td>Parses an unstructured message field&amp;rsquo;s value to a struct by combining Grok patterns&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#grouprowfilter">GroupRowFilter&lt;/a>&lt;/td>
&lt;td>Regroups multiple following messages into a single message by composing a grouping key&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#joinfilter">JoinFilter&lt;/a>&lt;/td>
&lt;td>Joins values of an array field with a specified separator&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#jsonfilter">JSONFilter&lt;/a>&lt;/td>
&lt;td>Unmarshallings a JSON message field&amp;rsquo;s value to a complex struct&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#multirowfilter">MultiRowFilter&lt;/a>&lt;/td>
&lt;td>Combines following message lines into single one by combining patterns&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#renamefilter">RenameFilter&lt;/a>&lt;/td>
&lt;td>Renames a message field&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#splitfilter">SplitFilter&lt;/a>&lt;/td>
&lt;td>Splits a message field&amp;rsquo;s value to array&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="appendfilter">AppendFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.AppendFilter&lt;/code>&lt;/p>
&lt;p>The &lt;code>AppendFilter&lt;/code> is probably one of the most important processing filters to know.
It allows you to manipulate a source record by easily adding or replacing a field with a constant
value or a value extracted from another existing field using &lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/">ScEL&lt;/a>.&lt;/p>
&lt;h3 id="configuration">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>field&lt;/code>&lt;/td>
&lt;td>The name of the field to be added&lt;/td>
&lt;td>string (&lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/">ScEL supported&lt;/a>)&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>The value of the field to be added&lt;/td>
&lt;td>string (&lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/">ScEL supported&lt;/a>)&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>overwrite&lt;/code>&lt;/td>
&lt;td>Is existing field should be overwrite&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;em>false&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;p>The following examples shows how to use the &lt;code>AppendFilter&lt;/code> to concat two values from the array field named &lt;code>values&lt;/code>
using a &lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/#string-substitution">substitution expression&lt;/a>.
The concat value is then added to the a field named &lt;code>result&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Configuration&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters.SubstituteFilter.field=&amp;#34;result&amp;#34;
filters.SubstituteFilter.value=&amp;#34;{{ extract_array($.values,0) }}-{{ extract_array($.values,1) }}&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Input&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;World&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;World&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;result&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello-World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the previous example, we used the simple property expression &lt;code>result&lt;/code> to indicate the target field to which our value is added.
We have actually omitted the &lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/#scopes">expression scope&lt;/a> &lt;code>$value&lt;/code>.
By default, if no scope is defined in an expression, the scope &lt;code>$value&lt;/code> is implicitly applied.
Hence, we could have used the fully expression &lt;code>$value.result&lt;/code> which is similar to the simplified expression &lt;code>result&lt;/code>.&lt;/p>
&lt;p>But, you can perfectly used another expression scope. For example, you can leverage the &lt;code>AppendFilter&lt;/code> to dynamically
resolve the record-key or the output topic based on the record data.&lt;/p>
&lt;p>The following configuration show how to use the &lt;code>$topic&lt;/code> scope :&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters.SubstituteFilter.field=&amp;#34;$topic&amp;#34;
filters.SubstituteFilter.value=&amp;#34;my-topic-{{ lowercase(extract_array($.values,0)) }}&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Input&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;World&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;context&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;topic&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;my-topic-hello&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;World&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally the &lt;code>AppendFilter&lt;/code> can also accept an substitution expression for the property field.
This allows to dynamically determine the name of the field to be added.&lt;/p>
&lt;p>The following examples show how to use a property expression to get the named of the field from a&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters.SubstituteFilter.field=&amp;#34;$.target&amp;#34;
filters.SubstituteFilter.value=&amp;#34;{{ extract_array($.values, 0) }}-{{ extract_array($.values,1) }}&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Input&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;result&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;World&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;result&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;World&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;result&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello-World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="convertfilter">ConvertFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.ConvertFilter&lt;/code>&lt;/p>
&lt;p>The &lt;code>ConvertFilter&lt;/code> can be used to convert a field&amp;rsquo;s value into a specific type.&lt;/p>
&lt;h3 id="configuration-1">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>field&lt;/code>&lt;/td>
&lt;td>The field to convert (dot notation is supported)&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>to&lt;/code>&lt;/td>
&lt;td>The type to which the field must be converted&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>,&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>default&lt;/code>&lt;/td>
&lt;td>The default value to apply if the field cannot be converted&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>,&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ignoreMissing&lt;/code>&lt;/td>
&lt;td>If true and field does not exist the filter will be apply successfully without modifying the data. If field is null the schema will be modified.&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;em>true&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Supported types are :&lt;/p>
&lt;ul>
&lt;li>&lt;code>SHORT&lt;/code>&lt;/li>
&lt;li>&lt;code>INTEGER&lt;/code>&lt;/li>
&lt;li>&lt;code>LONG&lt;/code>&lt;/li>
&lt;li>&lt;code>FLOAT&lt;/code>&lt;/li>
&lt;li>&lt;code>DOUBLE&lt;/code>&lt;/li>
&lt;li>&lt;code>BOOLEAN&lt;/code>&lt;/li>
&lt;li>&lt;code>STRING&lt;/code>&lt;/li>
&lt;li>&lt;code>ARRAY&lt;/code>&lt;/li>
&lt;li>&lt;code>BYTES&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="examples-1">Examples&lt;/h3>
&lt;p>The following example shows how to convert a a field&amp;rsquo;s value containing the string &lt;code>yes&lt;/code> into a boolean.&lt;/p>
&lt;p>&lt;strong>Configuration&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters.BooleanConverter.field=&amp;#34;target&amp;#34;
filters.BooleanConverter.to=&amp;#34;BOOLEAN&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Input&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;yes&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="datefilter">DateFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.DateFilter&lt;/code>&lt;/p>
&lt;p>The &lt;code>DateFilter&lt;/code> converts a field&amp;rsquo;s value containing a date to a unix epoch time.&lt;/p>
&lt;h3 id="configuration-2">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>field&lt;/code>&lt;/td>
&lt;td>The field to get the date from .&lt;/td>
&lt;td>string(&lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/">ScEL supported&lt;/a>)&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>target&lt;/code>&lt;/td>
&lt;td>The target field.&lt;/td>
&lt;td>string(&lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/">ScEL supported&lt;/a>)&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>timezone&lt;/code>&lt;/td>
&lt;td>The timezone to use for parsing date.&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>UTC&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>locale&lt;/code>&lt;/td>
&lt;td>The locale to use for parsing date.&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>en_EN&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>format&lt;/code>&lt;/td>
&lt;td>List of the expected date formats.&lt;/td>
&lt;td>list&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-2">Examples&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters.MyDateFilter.field=&amp;#34;$.date&amp;#34;
filters.MyDateFilter.target=&amp;#34;$.timestamp&amp;#34;
filters.MyDateFilter.format=&amp;#34;yyyy-MM-dd&amp;#39;T&amp;#39;HH:mm:ss&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Input&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;date&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2001-07-04T12:08:56&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;date&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2001-07-04T12:08:56&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;timestamp&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">994248536000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="delimitedrowfilter">DelimitedRowFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.DelimitedRowFilter&lt;/code>.&lt;/p>
&lt;p>The &lt;code>DelimitedRowFilter&lt;/code> can be used to parse and stream delimited row files (i.e CSV) into Kafka.
Each row is parsed and published into a configured topic as a single Kafka data.&lt;/p>
&lt;h3 id="configuration-3">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>separator&lt;/code>&lt;/td>
&lt;td>The character used as a delimiter/separator between each value&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>;&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>trimColumn&lt;/code>&lt;/td>
&lt;td>Remove the leading and trailing whitespaces from all columns.&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;em>false&lt;/em>&lt;/td>
&lt;td>low&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>extractColumnName&lt;/code>&lt;/td>
&lt;td>Define the field from which the schema should be detected (all columns will be of type &amp;lsquo;string&amp;rsquo;)&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>autoGenerateColumnNames&lt;/code>&lt;/td>
&lt;td>Define whether column names should autogenerated or not (column names will of the form &amp;lsquo;column1, column2&amp;rsquo;)&lt;/td>
&lt;td>&lt;em>true&lt;/em>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>columns&lt;/code>&lt;/td>
&lt;td>The list of comma-separated column names in order they appear in each row. columns must be in the form of NAME:TYPE&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-3">Examples&lt;/h3>
&lt;p>The following example shows the use of the &lt;code>DelimitedRowFilter&lt;/code> to split the &lt;code>message&lt;/code> field using &lt;code>|&lt;/code> as a separator character.
The name of each column is extracted from the fields &lt;code>headers&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters.ParseDelimitedRow.extractColumnNam=&amp;#34;headers&amp;#34;
filters.ParseDelimitedRow.separator=&amp;#34;\\|&amp;#34;
filters.ParseDelimitedRow.trimColumn=&amp;#34;true&amp;#34;
filters.ParseDelimitedRow.type=&amp;#34;io.streamthoughts.kafka.connect.filepulse.filter.DelimitedRowFilter&amp;#34;
&lt;/code>&lt;/pre>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Important&lt;/h4>
Under the hood, the &lt;code>DelimitedRowFilter&lt;/code> will use the &lt;a href="https://docs.oracle.com/javase/9/docs/api/java/lang/String.html#split-java.lang.String-">&lt;code>String#split&lt;/code>&lt;/a> method to parse the input line. This
method accepts a regex as argument then any special character must be escaped.
&lt;/div>
&lt;h2 id="dropfilter">DropFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.DropFilter&lt;/code>.&lt;/p>
&lt;p>The &lt;code>DropFilter&lt;/code> can be used to prevent some messages (i.e records) to be written into Kafka.&lt;/p>
&lt;h3 id="configuration-4">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>if&lt;/code>&lt;/td>
&lt;td>Condition to apply the filter on the current record.&lt;/td>
&lt;td>string &lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/">ScEL supported&lt;/a>)&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>invert&lt;/code>&lt;/td>
&lt;td>Invert the boolean value return from the filter condition.&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;em>false&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>For more information about &lt;code>if&lt;/code> property, see : &lt;a href="conditional-execution">Conditional execution&lt;/a>.&lt;/p>
&lt;h3 id="examples-4">Examples&lt;/h3>
&lt;p>The following example shows the usage of &lt;strong>DropFilter&lt;/strong> to only keep records with a field &lt;code>level&lt;/code> containing to &lt;code>ERROR&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters=Drop
filters.Drop.type=io.streamthoughts.kafka.connect.filepulse.filter.DropFilter
filters.Drop.if={{ equals($.level, &amp;#39;ERROR&amp;#39;) }}
filters.Drop.invert=true
&lt;/code>&lt;/pre>&lt;h2 id="excludefilter">ExcludeFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.ExcludeFilter&lt;/code>.&lt;/p>
&lt;p>The &lt;code>ExcludeFilter&lt;/code> can be used to exclude one or more fields from the input record.&lt;/p>
&lt;h3 id="configuration-5">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>fields&lt;/code>&lt;/td>
&lt;td>The comma-separated list of field names to exclude&lt;/td>
&lt;td>list&lt;/td>
&lt;td>**&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-5">Examples&lt;/h3>
&lt;p>The following example shows the usage of &lt;strong>ExplodeFilter&lt;/strong>.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters=Exclude
filters.Exclude.type=io.streamthoughts.kafka.connect.filepulse.filter.ExcludeFilter
filters.Exclude.fields=message
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Input&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;message&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;pulse\&amp;#34;}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;pulse&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;pulse&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="explodefilter">ExplodeFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.ExplodeFilter&lt;/code>.&lt;/p>
&lt;p>The &lt;code>ExplodeFilter&lt;/code> can be used to explode an array or list field into separate records.&lt;/p>
&lt;h3 id="configuration-6">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>source&lt;/code>&lt;/td>
&lt;td>The input field on which to apply the filter&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>message&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-6">Examples&lt;/h3>
&lt;p>The following example shows the usage of &lt;strong>ExplodeFilter&lt;/strong>.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters=Explode
filters.Explode.type=io.streamthoughts.kafka.connect.filepulse.filter.ExplodeFilter
filters.Explode.source=measurements
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Input (single record)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;captor-0001&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;date&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2020-08-06T17:00:00&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;measurements&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">38&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">40&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">37&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output (multiple records)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;captor-0001&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;date&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2020-08-06T17:00:00&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;measurements&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">38&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;captor-0001&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;date&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2020-08-06T17:00:00&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;measurements&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">40&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;captor-0001&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;date&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2020-08-06T17:00:00&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;measurements&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;captor-0001&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;date&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2020-08-06T17:00:00&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;measurements&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">37&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="failfilter">FailFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.FailFilter&lt;/code>.&lt;/p>
&lt;p>The fail filter can be used to throw an exception with a provided error message.
For example, this can be useful to stop processing a file when a non-conform record is read.&lt;/p>
&lt;h3 id="configuration-7">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>if&lt;/code>&lt;/td>
&lt;td>Condition to apply the filter on the current record.&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>invert&lt;/code>&lt;/td>
&lt;td>Invert the boolean value return from the filter condition.&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;em>false&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>message&lt;/code>&lt;/td>
&lt;td>The error message thrown by the filter. (&lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/">ScEL supported&lt;/a>)&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-7">Examples&lt;/h3>
&lt;p>The following example shows the usage of &lt;strong>FailFilter&lt;/strong> to stop processing a file when a field is equals to &lt;code>null&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters=Fail
filters.Fail.type=io.streamthoughts.kafka.connect.filepulse.filter.FailFilter
filters.Fail.if={{ is_null($.user_id) }}
filters.Fail.message=Invalid row, user_id is missing : {{ $value }}
&lt;/code>&lt;/pre>&lt;h2 id="grokfilter">GrokFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.GrokFilter&lt;/code>.&lt;/p>
&lt;p>The &lt;code>GrokFilter&lt;/code> allows you to parse unstructured data like applications logs to extract structured and meaningful data fields.&lt;/p>
&lt;p>&lt;strong>Regular Expressions&lt;/strong>
Grok are built on top of on regular expressions, so you can use any regular expressions as well to define your own patterns.&lt;/p>
&lt;p>Internally, FilePulse uses the regular expression library is &lt;a href="https://github.com/jruby/joni">Joni&lt;/a>
, a Java port of &lt;a href="https://github.com/kkos/oniguruma">Oniguruma&lt;/a> regexp library.&lt;/p>
&lt;h3 id="configuration-8">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>namedCapturesOnly&lt;/code>&lt;/td>
&lt;td>If true, only store named captures from grok.&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;em>true&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>matches&lt;/code>&lt;/td>
&lt;td>The Grok pattern to match.&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>overwrite&lt;/code>&lt;/td>
&lt;td>The fields to overwrite.&lt;/td>
&lt;td>list&lt;/td>
&lt;td>medium&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>patternDefinitions&lt;/code>&lt;/td>
&lt;td>Custom pattern definitions.&lt;/td>
&lt;td>list&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>low&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>patternsDir&lt;/code>&lt;/td>
&lt;td>List of user-defined pattern directories&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>low&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>source&lt;/code>&lt;/td>
&lt;td>The input field on which to apply the filter&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>message&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-8">Examples&lt;/h3>
&lt;p>The following example shows the usage of &lt;strong>GrokFilter&lt;/strong> to parse and extract fields from application log message.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters.ParseLog4jLog.match=&amp;#34;%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}&amp;#34;
filters.ParseLog4jLog.overwrite=&amp;#34;message&amp;#34;
filters.ParseLog4jLog.source=&amp;#34;message&amp;#34;
filters.ParseLog4jLog.type=&amp;#34;io.streamthoughts.kafka.connect.filepulse.filter.GrokFilter&amp;#34;
filters.ParseLog4jLog.ignoreFailure=&amp;#34;true&amp;#34;
&lt;/code>&lt;/pre>&lt;h2 id="grouprowfilter">GroupRowFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.GroupRowFilter&lt;/code>.&lt;/p>
&lt;h3 id="configuration-9">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>fields&lt;/code>&lt;/td>
&lt;td>List of fields used to regroup records&lt;/td>
&lt;td>list&lt;/td>
&lt;td>high&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>max.buffered.records&lt;/code>&lt;/td>
&lt;td>The maximum number of records to group (default : -1).&lt;/td>
&lt;td>integer&lt;/td>
&lt;td>&lt;em>-1&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>target&lt;/code>&lt;/td>
&lt;td>The target array field to put the grouped field&lt;/td>
&lt;td>integer&lt;/td>
&lt;td>&lt;em>records&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-9">Examples&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">&lt;/code>&lt;/pre>&lt;h2 id="joinfilter">JoinFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.JoinFilter&lt;/code>.&lt;/p>
&lt;h3 id="configuration-10">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>field&lt;/code>&lt;/td>
&lt;td>The field to get the date from&lt;/td>
&lt;td>string(&lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/">ScEL supported&lt;/a>)&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>target&lt;/code>&lt;/td>
&lt;td>The target field&lt;/td>
&lt;td>string(&lt;a href="https://streamthoughts.github.io/kafka-connect-file-pulse/kafka-connect-file-pulse/docs/developer-guide/accessing-data-and-metadata/">ScEL supported&lt;/a>)&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>separator&lt;/code>&lt;/td>
&lt;td>The separator used for joining array values.&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>,&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-10">Examples&lt;/h3>
&lt;h2 id="jsonfilter">JSONFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.JSONFilter&lt;/code>.&lt;/p>
&lt;p>The &lt;code>JSONFilter&lt;/code> parses an input json field.&lt;/p>
&lt;h3 id="configuration-11">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>overwrite&lt;/code>&lt;/td>
&lt;td>The fields to overwrite&lt;/td>
&lt;td>list&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>source&lt;/code>&lt;/td>
&lt;td>The input field on which to apply the filter&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>message&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>target&lt;/code>&lt;/td>
&lt;td>The target field to put the parsed JSON data&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>charset&lt;/code>&lt;/td>
&lt;td>The charset to be used for reading the source field (if source if of type &lt;code>BYTES&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>UTF-8&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-11">Examples&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters=MyJsonFilter
filters.MyJsonFilter.type=io.streamthoughts.kafka.connect.filepulse.filter.JSONFilter
filters.MyJsonFilter.source=message
filters.MyJsonFilter.target=payload
&lt;/code>&lt;/pre>&lt;h2 id="multirowfilter">MultiRowFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.MultiRowFilter&lt;/code>.&lt;/p>
&lt;p>The &lt;code>MultiRowFilter&lt;/code> joins multiple lines into a single Struct using a regex pattern.&lt;/p>
&lt;h3 id="configuration-12">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>negate&lt;/code>&lt;/td>
&lt;td>Negate the regexp pattern (if not matched).&amp;quot;&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pattern&lt;/code>&lt;/td>
&lt;td>The pattern to match multiline&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>patternDefinitions&lt;/code>&lt;/td>
&lt;td>Custom pattern definitions.&lt;/td>
&lt;td>list&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>low&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>patternsDir&lt;/code>&lt;/td>
&lt;td>List of user-defined pattern directories&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>low&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>separator&lt;/code>&lt;/td>
&lt;td>The character to be used to concat multi lines&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&amp;ldquo;\n&amp;rdquo;&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-12">Examples&lt;/h3>
&lt;p>The following example shows the usage of the &lt;code>MultiRowFilter&lt;/code> to join Java exception message with its stacktrace.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters=StackTraceMultiRowFilter
filters.StackTraceMultiRowFilter.type=io.streamthoughts.kafka.connect.filepulse.filter.MultiRowFilter
filters.StackTraceMultiRowFilter.negate=false
filters.StackTraceMultiRowFilter.pattern=^[\t]
&lt;/code>&lt;/pre>&lt;h2 id="renamefilter">RenameFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.RenameFilter&lt;/code>.&lt;/p>
&lt;p>The &lt;code>RenameFilter&lt;/code> is used to rename a specified field.&lt;/p>
&lt;h3 id="configuration-13">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>field&lt;/code>&lt;/td>
&lt;td>The field to rename&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>target&lt;/code>&lt;/td>
&lt;td>The target name&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ignoreMissing&lt;/code>&lt;/td>
&lt;td>If true and field does not exist the filter will be apply successfully without modifying the data. If field is null the schema will be modified.&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;em>true&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="examples-13">Examples&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters.MyRenameFilter.field=input
filters.MyRenameFilter.target=renamed
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Input&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;input&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;renamed&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="splitfilter">SplitFilter&lt;/h2>
&lt;p>The following provides usage information for : &lt;code>io.streamthoughts.kafka.connect.filepulse.filter.SplitFilter&lt;/code>.&lt;/p>
&lt;p>The &lt;code>SplitFilter&lt;/code> splits a field&amp;rsquo;s value of type string into an array by using a specific separator.&lt;/p>
&lt;h3 id="configuration-14">Configuration&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>split&lt;/code>&lt;/td>
&lt;td>The comma-separated list of fields to split&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>separator&lt;/code>&lt;/td>
&lt;td>The separator used for splitting a message field&amp;rsquo;s value to array&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>,&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>target&lt;/code>&lt;/td>
&lt;td>The target field to put the parsed JSON data&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>&lt;strong>Configuration&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-properties" data-lang="properties">filters.MySplitterFilter.split=input
filters.MySplitterFilter.separator=,
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Input&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;input&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;val0,val1,val2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;record&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;input&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;val0,val1,val2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;output&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;val0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;val1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;val2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Tracking File Status</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/tracking-files-status/</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/tracking-files-status/</guid><description>
&lt;p>Connect File Pulse use an internal topic (&lt;em>default:&lt;code>connect-file-pulse-status&lt;/code>&lt;/em>) to track the current state of files being processed.
This topic is used internally by Tasks to communicate to the SourceConnector instance but you can easily use it to monitor files progression.&lt;/p>
&lt;h2 id="the-message-format">The message format&lt;/h2>
&lt;p>Status event are publish into JSON with the following schema :&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;hostname&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
&amp;#34;description: &amp;#34;The machine from which the source file is read.&amp;#34;
},
&amp;#34;status&amp;#34;:{
&amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
&amp;#34;description: &amp;#34;The current status&amp;#34;
},
&amp;#34;metadata&amp;#34;:{
&amp;#34;name&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
&amp;#34;description: &amp;#34;The file name.&amp;#34;
},
&amp;#34;path&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
&amp;#34;description: &amp;#34;The file absolute path.&amp;#34;
},
&amp;#34;size&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;int&amp;#34;,
&amp;#34;description: &amp;#34;The file size.&amp;#34;
},
lastModified&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;,
&amp;#34;description: &amp;#34;The file last-modified property.&amp;#34;
},
&amp;#34;inode&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;int&amp;#34;,
&amp;#34;description: &amp;#34;The file inode&amp;#34;
},
&amp;#34;hash&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;int&amp;#34;,
&amp;#34;description: &amp;#34;CRC32&amp;#34;
}
},
&amp;#34;offset&amp;#34;:{
&amp;#34;position&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;,
&amp;#34;description: &amp;#34;The current position in the source file (default : -1).&amp;#34;
},
&amp;#34;rows&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;,
&amp;#34;description: &amp;#34;The number of rows already read from the source file (default : -1).&amp;#34;
},
&amp;#34;timestamp&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;,
&amp;#34;description: &amp;#34;The offset timestamp&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;h2 id="list-of-file-status">List of File Status&lt;/h2>
&lt;p>Source file can be in the following states :&lt;/p>
&lt;ul>
&lt;li>[1] &lt;strong>SCHEDULED&lt;/strong> : The file has been scheduled by the connector monitoring thread.&lt;/li>
&lt;li>[2] &lt;strong>INVALID&lt;/strong> : The file can&amp;rsquo;t be scheduled because it is not readable.&lt;/li>
&lt;li>[2] &lt;strong>STARTED&lt;/strong> : The file is starting to be read by a Task.&lt;/li>
&lt;li>[3] &lt;strong>READING&lt;/strong> : The file is currently being read by a task. An event is wrote into Kafka while committing offsets.&lt;/li>
&lt;li>[4] &lt;strong>FAILED&lt;/strong> : The file processing failed.&lt;/li>
&lt;li>[4] &lt;strong>COMPLETED&lt;/strong> : The file processing is completed.&lt;/li>
&lt;li>[5] &lt;strong>CLEANED&lt;/strong> : The file has been successfully clean up (depending of the configured strategy).&lt;/li>
&lt;/ul>
&lt;h2 id="configure-kafka-reporter">Configure Kafka reporter&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>internal.kafka.reporter.topic&lt;/code>&lt;/td>
&lt;td>Name of the internal topic used by tasks and connector to report and monitor file progression.&lt;/td>
&lt;td>class&lt;/td>
&lt;td>&lt;em>connect-file-pulse-status&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>internal.kafka.reporter.id&lt;/code>&lt;/td>
&lt;td>Group id the internal topic used by tasks and connector to report and monitor file progression&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>internal.kafka.reporter.bootstrap.servers&lt;/code>&lt;/td>
&lt;td>Reporter identifier to be used by tasks and connector to report and monitor file progression (must be unique per connector).&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="override-internal-consumerproducer-configuration">Override Internal Consumer/Producer Configuration&lt;/h2>
&lt;p>To override the default configuration for the internal consumer and producer clients used for reporting states,
you can used one of the following override prefixes :&lt;/p>
&lt;ul>
&lt;li>&lt;code>internal.kafka.reporter.consumer.&amp;lt;consumer_property&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>internal.kafka.reporter.producer.&amp;lt;producer_property&amp;gt;&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: File Cleanup Policies</title><link>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/cleaning-completed-files/</link><pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate><guid>https://streamthoughts.github.io/kafka-connect-file-pulse/docs/archives/v1.4.x/developer-guide/cleaning-completed-files/</guid><description>
&lt;p>The connector can be configured with a specific &lt;a href="connect-file-pulse-api/src/main/java/io/streamthoughts/kafka/connect/filepulse/clean/FileCleanupPolicy.java">FileCleanupPolicy&lt;/a> implementation.&lt;/p>
&lt;p>The cleanup policy can be configured with the below connect property :&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>fs.cleanup.policy.class&lt;/code>&lt;/td>
&lt;td>The fully qualified name of the class which is used to cleanup files&lt;/td>
&lt;td>class&lt;/td>
&lt;td>&lt;em>-&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="available-cleanup-policies">Available Cleanup Policies&lt;/h2>
&lt;h3 id="deletecleanpolicy">DeleteCleanPolicy&lt;/h3>
&lt;p>This policy deletes all files regardless of their final status (completed or failed).&lt;/p>
&lt;p>To enable this policy, the property &lt;code>fs.cleanup.policy.class&lt;/code> must configured to :&lt;/p>
&lt;pre tabindex="0">&lt;code>io.streamthoughts.kafka.connect.filepulse.clean.DeleteCleanPolicy
&lt;/code>&lt;/pre>&lt;h4 id="configuration">Configuration&lt;/h4>
&lt;p>no configuration&lt;/p>
&lt;h3 id="logcleanpolicy">LogCleanPolicy&lt;/h3>
&lt;p>This policy prints to logs some information after files completion.&lt;/p>
&lt;p>To enable this policy, the property &lt;code>fs.cleanup.policy.class&lt;/code> must configured to :&lt;/p>
&lt;pre tabindex="0">&lt;code>io.streamthoughts.kafka.connect.filepulse.clean.LogCleanPolicy
&lt;/code>&lt;/pre>&lt;h4 id="configuration-1">Configuration&lt;/h4>
&lt;p>no configuration&lt;/p>
&lt;h3 id="movecleanpolicy">MoveCleanPolicy&lt;/h3>
&lt;p>This policy attempts to move atomically files to configurable target directories.&lt;/p>
&lt;p>To enable this policy, the property &lt;code>fs.cleanup.policy.class&lt;/code> must configured to :&lt;/p>
&lt;pre tabindex="0">&lt;code>io.streamthoughts.kafka.connect.filepulse.clean.MoveCleanPolicy
&lt;/code>&lt;/pre>&lt;h4 id="configuration-2">Configuration&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Configuration&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Importance&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>cleaner.output.failed.path&lt;/code>&lt;/td>
&lt;td>Target directory for file proceed with failure&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>.failure&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>cleaner.output.succeed.path&lt;/code>&lt;/td>
&lt;td>Target directory for file proceed successfully&lt;/td>
&lt;td>string&lt;/td>
&lt;td>&lt;em>.success&lt;/em>&lt;/td>
&lt;td>high&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="implementing-your-own-policy">Implementing your own policy&lt;/h2></description></item></channel></rss>